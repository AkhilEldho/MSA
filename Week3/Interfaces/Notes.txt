INTERFACE

interface Employee {
    firstName: string;
    lastName: string;
    fullName(): string;
}

an interface's job is to describe a type of object

-example
let employee: Employee = {
    firstName : "Emil",
    lastName: "Andersson",
    fullName(): string {
        return this.firstName + " " + this.lastName;
    }
}

TYPE
type is similar to interface but key difference being it cannot be reopened to add new values.
whereas interface it's extendable

Required	All properties are required.	firstName: string;
Optional	Add a question mark (?) to the end of the property name. Use this for properties that are not required.	firstName?: string;
Read only	Use this for properties that should only be modified when an object is first created.	readonly firstName: string;


INTERFACE WITH MEMBERS
interface IceCream {
   flavor: string;
   scoops: number;
}

let myIceCream: IceCream = {
   flavor: 'vanilla',
   scoops: 2
}

console.log(myIceCream.flavor);

EXTEND INTERFACE
interface Sundae extends IceCream {
    sauce: 'chocolate' | 'caramel' | 'strawberry';
    nuts?: boolean;
    whippedCream?: boolean;
    instructions?: boolean;
}

let myIceCream: Sundae = {
    flavor: 'vanilla',
    scoops: 2,
    sauce: 'caramel',
    nuts: true
}

CREATE INDEXABLE TYPES
Indexable types store values but they intake number and return string or whatever is set to output

interface IceCreamArray {
    [index: number]: string;
}

let myIceCream: IceCreamArray;
myIceCream = ['chocolate', 'vanilla', 'strawberry'];
let myStr: string = myIceCream[0];
console.log(myStr);

output would be "chocolate"

API USING INTERFACE


const fetchURL = 'https://jsonplaceholder.typicode.com/posts'
// Interface describing the shape of our json data
interface Post {
    userId: number;
    id: number;
    title: string;
    body: string;
}
async function fetchPosts(url: string) {
    let response = await fetch(url);
    let body = await response.json();
    return body as Post[];
}
async function showPost() {
    let posts = await fetchPosts(fetchURL);
    // Display the contents of the first item in the response
    let post = posts[0];
    console.log('Post #' + post.id)
    // If the userId is 1, then display a note that it's an administrator
    console.log('Author: ' + (post.userId === 1 ? "Administrator" : post.userId.toString()))
    console.log('Title: ' + post.title)
    console.log('Body: ' + post.body)
}

showPost();





